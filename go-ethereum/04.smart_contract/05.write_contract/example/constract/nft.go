// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package sl

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ISecondLiveMedalPinfo is an auto generated low-level Go binding around an user-defined struct.
type ISecondLiveMedalPinfo struct {
	Pid         *big.Int
	Level       *big.Int
	Master      common.Address
	CanTranster bool
}

// SecondLiveMedalABI is the input ABI used to generate the binding from.
const SecondLiveMedalABI = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"DefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"RevokeMinterAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"master\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canTranster\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"structISecondLiveMedal.Pinfo\",\"name\":\"pinfo\",\"type\":\"tuple\"}],\"name\":\"SecondLiveMedalMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetMinterAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"SetTokenURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"URIPrefix\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"UpdateTokenRoyalty\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPinfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"master\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canTranster\",\"type\":\"bool\"}],\"internalType\":\"structISecondLiveMedal.Pinfo\",\"name\":\"pinfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"master\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canTranster\",\"type\":\"bool\"}],\"internalType\":\"structISecondLiveMedal.Pinfo\",\"name\":\"pinfo\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pinfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"master\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canTranster\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"resetTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minterAdmin\",\"type\":\"address\"}],\"name\":\"revokeMinterAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minterAdmin\",\"type\":\"address\"}],\"name\":\"setMinterAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"updateTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"updateURIPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// SecondLiveMedalBin is the compiled bytecode used for deploying new contracts.
var SecondLiveMedalBin = "0x60806040523480156200001157600080fd5b506040516200392838038062003928833981016040819052620000349162000260565b6001805460ff1916905581518290829062000057906002906020850190620000ed565b5080516200006d906003906020840190620000ed565b5050506200008a620000846200009760201b60201c565b6200009b565b50506001600f5562000306565b3390565b600e80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000fb90620002ca565b90600052602060002090601f0160209004810192826200011f57600085556200016a565b82601f106200013a57805160ff19168380011785556200016a565b828001600101855582156200016a579182015b828111156200016a5782518255916020019190600101906200014d565b50620001789291506200017c565b5090565b5b808211156200017857600081556001016200017d565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001bb57600080fd5b81516001600160401b0380821115620001d857620001d862000193565b604051601f8301601f19908116603f0116810190828211818310171562000203576200020362000193565b816040528381526020925086838588010111156200022057600080fd5b600091505b8382101562000244578582018301518183018401529082019062000225565b83821115620002565760008385830101525b9695505050505050565b600080604083850312156200027457600080fd5b82516001600160401b03808211156200028c57600080fd5b6200029a86838701620001a9565b93506020850151915080821115620002b157600080fd5b50620002c085828601620001a9565b9150509250929050565b600181811c90821680620002df57607f821691505b6020821081036200030057634e487b7160e01b600052602260045260246000fd5b50919050565b61361280620003166000396000f3fe608060405234801561001057600080fd5b506004361061025e5760003560e01c806370a0823111610146578063aa1b103f116100c3578063c94c1bd411610087578063c94c1bd41461055b578063d547741f1461056e578063dd3eb9bd14610581578063e985e9c5146105f6578063f2fde38b14610632578063fdcdcb331461064557600080fd5b8063aa1b103f14610507578063b88d4fde1461050f578063bceb2a2214610522578063c4d66de814610535578063c87b56dd1461054857600080fd5b806391d148541161010a57806391d14854146104a557806395d89b41146104b857806399235f39146104d9578063a217fddf146104ec578063a22cb465146104f457600080fd5b806370a082311461045e578063715018a6146104715780638456cb59146104795780638a616bc0146104815780638da5cb5b1461049457600080fd5b80632f2ff15d116101df57806342842e0e116101a357806342842e0e146103f457806342966c68146104075780634f6ccce71461041a5780635944c7531461042d5780635c975abb146104405780636352211e1461044b57600080fd5b80632f2ff15d146103a05780632f745c59146103b357806336568abe146103c6578063369088f0146103d95780633f4ba83a146103ec57600080fd5b806318160ddd1161022657806318160ddd1461031357806318e97fd11461032557806323b872dd14610338578063248a9ca31461034b5780632a55205a1461036e57600080fd5b806301ffc9a71461026357806304634d8d1461028b57806306fdde03146102a0578063081812fc146102d5578063095ea7b314610300575b600080fd5b610276610271366004612c8d565b610696565b60405190151581526020015b60405180910390f35b61029e610299366004612cdb565b6106a7565b005b60408051808201909152601081526f4d4544414c2e5345434f4e444c49564560801b60208201525b6040516102829190612d68565b6102e86102e3366004612d7b565b610727565b6040516001600160a01b039091168152602001610282565b61029e61030e366004612d94565b6107af565b600a545b604051908152602001610282565b61029e610333366004612e6c565b6108c4565b61029e610346366004612eb3565b6108fc565b610317610359366004612d7b565b60009081526020819052604090206001015490565b61038161037c366004612ef4565b61092e565b604080516001600160a01b039093168352602083019190915201610282565b61029e6103ae366004612f16565b6109da565b6103176103c1366004612d94565b610a00565b61029e6103d4366004612f16565b610a96565b61029e6103e7366004612f46565b610b10565b61029e610bf6565b61029e610402366004612eb3565b610c2a565b61029e610415366004612d7b565b610c45565b610317610428366004612d7b565b610d02565b61029e61043b366004612f63565b610d95565b60015460ff16610276565b6102e8610459366004612d7b565b610e9d565b61031761046c366004612f46565b610f14565b61029e610f9b565b61029e610fcf565b61029e61048f366004612d7b565b611001565b600e546001600160a01b03166102e8565b6102766104b3366004612f16565b611078565b604080518082019091526005815264135151105360da1b60208201526102c8565b61029e6104e7366004612f46565b6110a1565b610317600081565b61029e610502366004612faf565b611222565b61029e61122d565b61029e61051d366004612fdd565b611290565b61029e61053036600461305d565b6112c8565b61029e610543366004612f46565b611348565b6102c8610556366004612d7b565b6113b4565b610317610569366004613092565b61151d565b61029e61057c366004612f16565b6116a1565b6105c561058f366004612d7b565b6014602052600090815260409020805460018201546002909201549091906001600160a01b03811690600160a01b900460ff1684565b604051610282949392919093845260208401929092526001600160a01b031660408301521515606082015260800190565b6102766106043660046130d3565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b61029e610640366004612f46565b6116c7565b610658610653366004612d7b565b61175f565b604051610282919081518152602080830151908201526040808301516001600160a01b03169082015260609182015115159181019190915260800190565b60006106a182611838565b92915050565b600e546001600160a01b031633146106da5760405162461bcd60e51b81526004016106d190613101565b60405180910390fd5b6106e4828261185d565b6040516001600160601b038216906001600160a01b038416907f378e0d79d5bc01ff46b21ccbdabc124751f2f6880425e873742b04c2e3a65c6c90600090a35050565b600061073282611917565b6107935760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106d1565b506000908152600660205260409020546001600160a01b031690565b60006107ba82610e9d565b9050806001600160a01b0316836001600160a01b0316036108275760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016106d1565b336001600160a01b038216148061084357506108438133610604565b6108b55760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016106d1565b6108bf8383611934565b505050565b600e546001600160a01b031633146108ee5760405162461bcd60e51b81526004016106d190613101565b6108f882826119a2565b5050565b610907335b82611a68565b6109235760405162461bcd60e51b81526004016106d190613136565b6108bf838383611b52565b6000828152600d602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b03169282019290925282916109a3575060408051808201909152600c546001600160a01b0381168252600160a01b90046001600160601b031660208201525b6020810151600090612710906109c2906001600160601b03168761319d565b6109cc91906131d2565b915196919550909350505050565b6000828152602081905260409020600101546109f68133611c32565b6108bf8383611c96565b6000610a0b83610f14565b8210610a6d5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016106d1565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b6001600160a01b0381163314610b065760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106d1565b6108f88282611d1a565b600e546001600160a01b03163314610b3a5760405162461bcd60e51b81526004016106d190613101565b6040805180820190915260118152702927a622afa6a4a72a22a92fa0a226a4a760791b602090910152610b7b60008051602061359d83398151915282611d1a565b60408051808201825260118152702927a622afa6a4a72a22a92fa0a226a4a760791b602091820152815160008051602061359d83398151915281526001600160a01b038416918101919091527f66094e85404f90ff983a85ad6e7d3107aa2de3c40e8012deeceaad44806e9c8091015b60405180910390a150565b600e546001600160a01b03163314610c205760405162461bcd60e51b81526004016106d190613101565b610c28611d7f565b565b6108bf83838360405180602001604052806000815250611290565b610c4e33610901565b610cb05760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a206275726e2063616c6c6572206973206e6f74206f776e657260448201526c081b9bdc88185c1c1c9bdd9959609a1b60648201526084016106d1565b610cb981611e12565b6000818152600d602052604081205560008181526013602052604090208054610ce1906131e6565b159050610cff576000818152601360205260408120610cff91612ba4565b50565b6000610d0d600a5490565b8210610d705760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016106d1565b600a8281548110610d8357610d83613220565b90600052602060002001549050919050565b600e546001600160a01b0316331480610de4575060408051808201909152600b81526a2927a622afa6a4a72a22a960a91b602090910152610de46000805160206135bd83398151915233611078565b610e415760405162461bcd60e51b815260206004820152602860248201527f5365636f6e644c6976654d6564616c3a2063616c6c6572206e6f207065726d696044820152677373696f6e21212160c01b60648201526084016106d1565b610e4c838383611eb9565b604080516001600160a01b03841681526001600160601b038316602082015284917f8219bae90c1815288c07ea441a930eb14c911bcee209d79219ff8098e9b243a2910160405180910390a2505050565b6000818152600460205260408120546001600160a01b0316806106a15760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016106d1565b60006001600160a01b038216610f7f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016106d1565b506001600160a01b031660009081526005602052604090205490565b600e546001600160a01b03163314610fc55760405162461bcd60e51b81526004016106d190613101565b610c286000611f84565b600e546001600160a01b03163314610ff95760405162461bcd60e51b81526004016106d190613101565b610c28611fd6565b600e546001600160a01b0316331461102b5760405162461bcd60e51b81526004016106d190613101565b6000818152600d6020526040812055604080516000808252602082015282917f8219bae90c1815288c07ea441a930eb14c911bcee209d79219ff8098e9b243a2910160405180910390a250565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600e546001600160a01b031633146110cb5760405162461bcd60e51b81526004016106d190613101565b604080518082018252600b81526a2927a622afa6a4a72a22a960a91b602091820152815180830190925260118252702927a622afa6a4a72a22a92fa0a226a4a760791b9101526111376000805160206135bd83398151915260008051602061359d83398151915261204f565b6040805180820190915260118152702927a622afa6a4a72a22a92fa0a226a4a760791b60209091015261117860008051602061359d8339815191528261209a565b604080518082018252600b81526a2927a622afa6a4a72a22a960a91b6020918201528151808301835260118152702927a622afa6a4a72a22a92fa0a226a4a760791b9082015281516000805160206135bd833981519152815260008051602061359d833981519152918101919091526001600160a01b038316918101919091527fec9b6dc2d06e32f5e9fdce0cee0f7443bcb99666a145147f25e659e87c5dd3f190606001610beb565b6108f83383836120a4565b600e546001600160a01b031633146112575760405162461bcd60e51b81526004016106d190613101565b6112616000600c55565b60405160009081907f378e0d79d5bc01ff46b21ccbdabc124751f2f6880425e873742b04c2e3a65c6c908290a3565b61129a3383611a68565b6112b65760405162461bcd60e51b81526004016106d190613136565b6112c284848484612172565b50505050565b600e546001600160a01b031633146112f25760405162461bcd60e51b81526004016106d190613101565b8051611305906011906020840190612bde565b5060116040516113159190613236565b604051908190038120907f5b2f71ae2236304212a8f3529aa50b6ae9fe556cc6a4af4f9b51f89328d057f290600090a250565b60105460ff161561139b5760405162461bcd60e51b815260206004820181905260248201527f696e697469616c697a653a20416c726561647920696e697469616c697a65642160448201526064016106d1565b6113a481611f84565b506010805460ff19166001179055565b60606113bf82611917565b6114245760405162461bcd60e51b815260206004820152603060248201527f5365636f6e644c6976654d6564616c3a2055524920717565727920666f72206e60448201526f37b732bc34b9ba32b73a103a37b5b2b760811b60648201526084016106d1565b600061142e6121a5565b60008481526013602052604081208054929350909161144c906131e6565b80601f0160208091040260200160405190810160405280929190818152602001828054611478906131e6565b80156114c55780601f1061149a576101008083540402835291602001916114c5565b820191906000526020600020905b8154815290600101906020018083116114a857829003601f168201915b5050505050905081516000036114dc579392505050565b8051156114ea579392505050565b816114f485612237565b6040516020016115059291906132d1565b60405160208183030381529060405292505050919050565b60006002600f54036115715760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106d1565b6002600f5560408051808201909152600b81526a2927a622afa6a4a72a22a960a91b6020909101526115b16000805160206135bd83398151915233611078565b61160d5760405162461bcd60e51b815260206004820152602760248201527f5365636f6e644c6976654d6564616c3a2043616c6c6572206973206e6f7420616044820152661036b4b73a32b960c91b60648201526084016106d1565b6012805490600061161d83613300565b90915550506012546000908152601460205260409020829061163f8282613319565b90505061164e83601254612338565b601254836001600160a01b03167f9c6586c479c35ac13b6cc2d67784fcf5689941956c7eacf21e267d65caf6b30c8460405161168a9190613376565b60405180910390a3506012546001600f5592915050565b6000828152602081905260409020600101546116bd8133611c32565b6108bf8383611d1a565b600e546001600160a01b031633146116f15760405162461bcd60e51b81526004016106d190613101565b6001600160a01b0381166117565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106d1565b610cff81611f84565b60408051608081018252600080825260208201819052918101829052606081019190915261178c82611917565b6117e35760405162461bcd60e51b815260206004820152602260248201527f5365636f6e644c6976654d6564616c3a206e6f6e6578697374656e7420746f6b60448201526132b760f11b60648201526084016106d1565b50600090815260146020908152604091829020825160808101845281548152600182015492810192909252600201546001600160a01b03811692820192909252600160a01b90910460ff161515606082015290565b60006001600160e01b0319821663152a902d60e11b14806106a157506106a182612477565b6127106001600160601b03821611156118885760405162461bcd60e51b81526004016106d1906133c1565b6001600160a01b0382166118de5760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c69642072656365697665720000000000000060448201526064016106d1565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600c55565b6000908152600460205260409020546001600160a01b0316151590565b600081815260066020526040902080546001600160a01b0319166001600160a01b038416908117909155819061196982610e9d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6119ab82611917565b611a0c5760405162461bcd60e51b815260206004820152602c60248201527f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106d1565b60008281526013602090815260409091208251611a2b92840190612bde565b50817fd2d827dddfc9c9a02afc5fc68d3251684b36e213a7999ebd90a861f25df4077e82604051611a5c9190612d68565b60405180910390a25050565b6000611a7382611917565b611ad45760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106d1565b6000611adf83610e9d565b9050806001600160a01b0316846001600160a01b03161480611b1a5750836001600160a01b0316611b0f84610727565b6001600160a01b0316145b80611b4a57506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b949350505050565b60015460ff1615611b965760405162461bcd60e51b815260206004820152600e60248201526d3830bab9b2903a3930b739b332b960911b60448201526064016106d1565b600081815260146020908152604091829020825160808101845281548152600182015492810192909252600201546001600160a01b03811692820192909252600160a01b90910460ff16151560608201819052611c265760405162461bcd60e51b815260206004820152600e60248201526d37b7363c903337b91037bbb732b960911b60448201526064016106d1565b506108bf83838361249c565b611c3c8282611078565b6108f857611c54816001600160a01b03166014612643565b611c5f836020612643565b604051602001611c7092919061340b565b60408051601f198184030181529082905262461bcd60e51b82526106d191600401612d68565b611ca08282611078565b6108f8576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611cd63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611d248282611078565b156108f8576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60015460ff16611dc85760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106d1565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000611e1d82610e9d565b9050611e2b816000846127e6565b611e36600083611934565b6001600160a01b0381166000908152600560205260408120805460019290611e5f908490613480565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6127106001600160601b0382161115611ee45760405162461bcd60e51b81526004016106d1906133c1565b6001600160a01b038216611f3a5760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d6574657273000000000060448201526064016106d1565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600d90529190942093519051909116600160a01b029116179055565b600e80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60015460ff161561201c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106d1565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833611df5565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6108f88282611c96565b816001600160a01b0316836001600160a01b0316036121055760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106d1565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61217d848484611b52565b6121898484848461289e565b6112c25760405162461bcd60e51b81526004016106d190613497565b6060601180546121b4906131e6565b80601f01602080910402602001604051908101604052809291908181526020018280546121e0906131e6565b801561222d5780601f106122025761010080835404028352916020019161222d565b820191906000526020600020905b81548152906001019060200180831161221057829003601f168201915b5050505050905090565b60608160000361225e5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612288578061227281613300565b91506122819050600a836131d2565b9150612262565b60008167ffffffffffffffff8111156122a3576122a3612dc0565b6040519080825280601f01601f1916602001820160405280156122cd576020820181803683370190505b5090505b8415611b4a576122e2600183613480565b91506122ef600a866134e9565b6122fa9060306134fd565b60f81b81838151811061230f5761230f613220565b60200101906001600160f81b031916908160001a905350612331600a866131d2565b94506122d1565b6001600160a01b03821661238e5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106d1565b61239781611917565b156123e45760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106d1565b6123f0600083836127e6565b6001600160a01b03821660009081526005602052604081208054600192906124199084906134fd565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160e01b0319821663780e9d6360e01b14806106a157506106a18261299f565b826001600160a01b03166124af82610e9d565b6001600160a01b0316146125135760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016106d1565b6001600160a01b0382166125755760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106d1565b6125808383836127e6565b61258b600082611934565b6001600160a01b03831660009081526005602052604081208054600192906125b4908490613480565b90915550506001600160a01b03821660009081526005602052604081208054600192906125e29084906134fd565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6060600061265283600261319d565b61265d9060026134fd565b67ffffffffffffffff81111561267557612675612dc0565b6040519080825280601f01601f19166020018201604052801561269f576020820181803683370190505b509050600360fc1b816000815181106126ba576126ba613220565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106126e9576126e9613220565b60200101906001600160f81b031916908160001a905350600061270d84600261319d565b6127189060016134fd565b90505b6001811115612790576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061274c5761274c613220565b1a60f81b82828151811061276257612762613220565b60200101906001600160f81b031916908160001a90535060049490941c9361278981613515565b905061271b565b5083156127df5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106d1565b9392505050565b6001600160a01b0383166128415761283c81600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b612864565b816001600160a01b0316836001600160a01b0316146128645761286483826129df565b6001600160a01b03821661287b576108bf81612a7c565b826001600160a01b0316826001600160a01b0316146108bf576108bf8282612b2b565b60006001600160a01b0384163b1561299457604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906128e290339089908890889060040161352c565b6020604051808303816000875af192505050801561291d575060408051601f3d908101601f1916820190925261291a91810190613569565b60015b61297a573d80801561294b576040519150601f19603f3d011682016040523d82523d6000602084013e612950565b606091505b5080516000036129725760405162461bcd60e51b81526004016106d190613497565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611b4a565b506001949350505050565b60006001600160e01b031982166380ac58cd60e01b14806129d057506001600160e01b03198216635b5e139f60e01b145b806106a157506106a182612b6f565b600060016129ec84610f14565b6129f69190613480565b600083815260096020526040902054909150808214612a49576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a54600090612a8e90600190613480565b6000838152600b6020526040812054600a8054939450909284908110612ab657612ab6613220565b9060005260206000200154905080600a8381548110612ad757612ad7613220565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a805480612b0f57612b0f613586565b6001900381819060005260206000200160009055905550505050565b6000612b3683610f14565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b60006001600160e01b03198216637965db0b60e01b14806106a157506301ffc9a760e01b6001600160e01b03198316146106a1565b508054612bb0906131e6565b6000825580601f10612bc0575050565b601f016020900490600052602060002090810190610cff9190612c62565b828054612bea906131e6565b90600052602060002090601f016020900481019282612c0c5760008555612c52565b82601f10612c2557805160ff1916838001178555612c52565b82800160010185558215612c52579182015b82811115612c52578251825591602001919060010190612c37565b50612c5e929150612c62565b5090565b5b80821115612c5e5760008155600101612c63565b6001600160e01b031981168114610cff57600080fd5b600060208284031215612c9f57600080fd5b81356127df81612c77565b6001600160a01b0381168114610cff57600080fd5b80356001600160601b0381168114612cd657600080fd5b919050565b60008060408385031215612cee57600080fd5b8235612cf981612caa565b9150612d0760208401612cbf565b90509250929050565b60005b83811015612d2b578181015183820152602001612d13565b838111156112c25750506000910152565b60008151808452612d54816020860160208601612d10565b601f01601f19169290920160200192915050565b6020815260006127df6020830184612d3c565b600060208284031215612d8d57600080fd5b5035919050565b60008060408385031215612da757600080fd5b8235612db281612caa565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115612df157612df1612dc0565b604051601f8501601f19908116603f01168101908282118183101715612e1957612e19612dc0565b81604052809350858152868686011115612e3257600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112612e5d57600080fd5b6127df83833560208501612dd6565b60008060408385031215612e7f57600080fd5b82359150602083013567ffffffffffffffff811115612e9d57600080fd5b612ea985828601612e4c565b9150509250929050565b600080600060608486031215612ec857600080fd5b8335612ed381612caa565b92506020840135612ee381612caa565b929592945050506040919091013590565b60008060408385031215612f0757600080fd5b50508035926020909101359150565b60008060408385031215612f2957600080fd5b823591506020830135612f3b81612caa565b809150509250929050565b600060208284031215612f5857600080fd5b81356127df81612caa565b600080600060608486031215612f7857600080fd5b833592506020840135612f8a81612caa565b9150612f9860408501612cbf565b90509250925092565b8015158114610cff57600080fd5b60008060408385031215612fc257600080fd5b8235612fcd81612caa565b91506020830135612f3b81612fa1565b60008060008060808587031215612ff357600080fd5b8435612ffe81612caa565b9350602085013561300e81612caa565b925060408501359150606085013567ffffffffffffffff81111561303157600080fd5b8501601f8101871361304257600080fd5b61305187823560208401612dd6565b91505092959194509250565b60006020828403121561306f57600080fd5b813567ffffffffffffffff81111561308657600080fd5b611b4a84828501612e4c565b60008082840360a08112156130a657600080fd5b83356130b181612caa565b92506080601f19820112156130c557600080fd5b506020830190509250929050565b600080604083850312156130e657600080fd5b82356130f181612caa565b91506020830135612f3b81612caa565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156131b7576131b7613187565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826131e1576131e16131bc565b500490565b600181811c908216806131fa57607f821691505b60208210810361321a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b600080835481600182811c91508083168061325257607f831692505b6020808410820361327157634e487b7160e01b86526022600452602486fd5b8180156132855760018114613296576132c3565b60ff198616895284890196506132c3565b60008a81526020902060005b868110156132bb5781548b8201529085019083016132a2565b505084890196505b509498975050505050505050565b600083516132e3818460208801612d10565b8351908301906132f7818360208801612d10565b01949350505050565b60006001820161331257613312613187565b5060010190565b813581556020820135600182015560028101604083013561333981612caa565b8154606085013561334981612fa1565b60ff60a01b90151560a01b166001600160a01b03929092166001600160a81b031991909116171790555050565b813581526020808301359082015260808101604083013561339681612caa565b6001600160a01b0316604083015260608301356133b281612fa1565b80151560608401525092915050565b6020808252602a908201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646040820152692073616c65507269636560b01b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613443816017850160208801612d10565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613474816028840160208801612d10565b01602801949350505050565b60008282101561349257613492613187565b500390565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000826134f8576134f86131bc565b500690565b6000821982111561351057613510613187565b500190565b60008161352457613524613187565b506000190190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061355f90830184612d3c565b9695505050505050565b60006020828403121561357b57600080fd5b81516127df81612c77565b634e487b7160e01b600052603160045260246000fdfec30b6f1bcbf41750053d221187e3d61595d548191e1ee1cab3dd3ae1dc469c0aaeaef46186eb59f884e36929b6d682a6ae35e1e43d8f05f058dcefb92b601461a26469706673582212206df66fd2759a0f4f0eee2def4b4531003d9f095425e044faaaa434b000cd6cdf64736f6c634300080e0033"

// DeploySecondLiveMedal deploys a new Ethereum contract, binding an instance of SecondLiveMedal to it.
func DeploySecondLiveMedal(auth *bind.TransactOpts, backend bind.ContractBackend, _name string, _symbol string) (common.Address, *types.Transaction, *SecondLiveMedal, error) {
	parsed, err := abi.JSON(strings.NewReader(SecondLiveMedalABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SecondLiveMedalBin), backend, _name, _symbol)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SecondLiveMedal{SecondLiveMedalCaller: SecondLiveMedalCaller{contract: contract}, SecondLiveMedalTransactor: SecondLiveMedalTransactor{contract: contract}, SecondLiveMedalFilterer: SecondLiveMedalFilterer{contract: contract}}, nil
}

// SecondLiveMedal is an auto generated Go binding around an Ethereum contract.
type SecondLiveMedal struct {
	SecondLiveMedalCaller     // Read-only binding to the contract
	SecondLiveMedalTransactor // Write-only binding to the contract
	SecondLiveMedalFilterer   // Log filterer for contract events
}

// SecondLiveMedalCaller is an auto generated read-only Go binding around an Ethereum contract.
type SecondLiveMedalCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SecondLiveMedalTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SecondLiveMedalTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SecondLiveMedalFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SecondLiveMedalFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SecondLiveMedalSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SecondLiveMedalSession struct {
	Contract     *SecondLiveMedal  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SecondLiveMedalCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SecondLiveMedalCallerSession struct {
	Contract *SecondLiveMedalCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// SecondLiveMedalTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SecondLiveMedalTransactorSession struct {
	Contract     *SecondLiveMedalTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// SecondLiveMedalRaw is an auto generated low-level Go binding around an Ethereum contract.
type SecondLiveMedalRaw struct {
	Contract *SecondLiveMedal // Generic contract binding to access the raw methods on
}

// SecondLiveMedalCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SecondLiveMedalCallerRaw struct {
	Contract *SecondLiveMedalCaller // Generic read-only contract binding to access the raw methods on
}

// SecondLiveMedalTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SecondLiveMedalTransactorRaw struct {
	Contract *SecondLiveMedalTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSecondLiveMedal creates a new instance of SecondLiveMedal, bound to a specific deployed contract.
func NewSecondLiveMedal(address common.Address, backend bind.ContractBackend) (*SecondLiveMedal, error) {
	contract, err := bindSecondLiveMedal(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SecondLiveMedal{SecondLiveMedalCaller: SecondLiveMedalCaller{contract: contract}, SecondLiveMedalTransactor: SecondLiveMedalTransactor{contract: contract}, SecondLiveMedalFilterer: SecondLiveMedalFilterer{contract: contract}}, nil
}

// NewSecondLiveMedalCaller creates a new read-only instance of SecondLiveMedal, bound to a specific deployed contract.
func NewSecondLiveMedalCaller(address common.Address, caller bind.ContractCaller) (*SecondLiveMedalCaller, error) {
	contract, err := bindSecondLiveMedal(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SecondLiveMedalCaller{contract: contract}, nil
}

// NewSecondLiveMedalTransactor creates a new write-only instance of SecondLiveMedal, bound to a specific deployed contract.
func NewSecondLiveMedalTransactor(address common.Address, transactor bind.ContractTransactor) (*SecondLiveMedalTransactor, error) {
	contract, err := bindSecondLiveMedal(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SecondLiveMedalTransactor{contract: contract}, nil
}

// NewSecondLiveMedalFilterer creates a new log filterer instance of SecondLiveMedal, bound to a specific deployed contract.
func NewSecondLiveMedalFilterer(address common.Address, filterer bind.ContractFilterer) (*SecondLiveMedalFilterer, error) {
	contract, err := bindSecondLiveMedal(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SecondLiveMedalFilterer{contract: contract}, nil
}

// bindSecondLiveMedal binds a generic wrapper to an already deployed contract.
func bindSecondLiveMedal(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SecondLiveMedalABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SecondLiveMedal *SecondLiveMedalRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SecondLiveMedal.Contract.SecondLiveMedalCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SecondLiveMedal *SecondLiveMedalRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.SecondLiveMedalTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SecondLiveMedal *SecondLiveMedalRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.SecondLiveMedalTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SecondLiveMedal *SecondLiveMedalCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SecondLiveMedal.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SecondLiveMedal *SecondLiveMedalTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SecondLiveMedal *SecondLiveMedalTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_SecondLiveMedal *SecondLiveMedalCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _SecondLiveMedal.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_SecondLiveMedal *SecondLiveMedalSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _SecondLiveMedal.Contract.DEFAULTADMINROLE(&_SecondLiveMedal.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_SecondLiveMedal *SecondLiveMedalCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _SecondLiveMedal.Contract.DEFAULTADMINROLE(&_SecondLiveMedal.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_SecondLiveMedal *SecondLiveMedalCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _SecondLiveMedal.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_SecondLiveMedal *SecondLiveMedalSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _SecondLiveMedal.Contract.BalanceOf(&_SecondLiveMedal.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_SecondLiveMedal *SecondLiveMedalCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _SecondLiveMedal.Contract.BalanceOf(&_SecondLiveMedal.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_SecondLiveMedal *SecondLiveMedalCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _SecondLiveMedal.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_SecondLiveMedal *SecondLiveMedalSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _SecondLiveMedal.Contract.GetApproved(&_SecondLiveMedal.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_SecondLiveMedal *SecondLiveMedalCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _SecondLiveMedal.Contract.GetApproved(&_SecondLiveMedal.CallOpts, tokenId)
}

// GetPinfo is a free data retrieval call binding the contract method 0xfdcdcb33.
//
// Solidity: function getPinfo(uint256 tokenId) view returns((uint256,uint256,address,bool) pinfo)
func (_SecondLiveMedal *SecondLiveMedalCaller) GetPinfo(opts *bind.CallOpts, tokenId *big.Int) (ISecondLiveMedalPinfo, error) {
	var out []interface{}
	err := _SecondLiveMedal.contract.Call(opts, &out, "getPinfo", tokenId)

	if err != nil {
		return *new(ISecondLiveMedalPinfo), err
	}

	out0 := *abi.ConvertType(out[0], new(ISecondLiveMedalPinfo)).(*ISecondLiveMedalPinfo)

	return out0, err

}

// GetPinfo is a free data retrieval call binding the contract method 0xfdcdcb33.
//
// Solidity: function getPinfo(uint256 tokenId) view returns((uint256,uint256,address,bool) pinfo)
func (_SecondLiveMedal *SecondLiveMedalSession) GetPinfo(tokenId *big.Int) (ISecondLiveMedalPinfo, error) {
	return _SecondLiveMedal.Contract.GetPinfo(&_SecondLiveMedal.CallOpts, tokenId)
}

// GetPinfo is a free data retrieval call binding the contract method 0xfdcdcb33.
//
// Solidity: function getPinfo(uint256 tokenId) view returns((uint256,uint256,address,bool) pinfo)
func (_SecondLiveMedal *SecondLiveMedalCallerSession) GetPinfo(tokenId *big.Int) (ISecondLiveMedalPinfo, error) {
	return _SecondLiveMedal.Contract.GetPinfo(&_SecondLiveMedal.CallOpts, tokenId)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_SecondLiveMedal *SecondLiveMedalCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _SecondLiveMedal.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_SecondLiveMedal *SecondLiveMedalSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _SecondLiveMedal.Contract.GetRoleAdmin(&_SecondLiveMedal.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_SecondLiveMedal *SecondLiveMedalCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _SecondLiveMedal.Contract.GetRoleAdmin(&_SecondLiveMedal.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_SecondLiveMedal *SecondLiveMedalCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _SecondLiveMedal.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_SecondLiveMedal *SecondLiveMedalSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _SecondLiveMedal.Contract.HasRole(&_SecondLiveMedal.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_SecondLiveMedal *SecondLiveMedalCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _SecondLiveMedal.Contract.HasRole(&_SecondLiveMedal.CallOpts, role, account)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_SecondLiveMedal *SecondLiveMedalCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _SecondLiveMedal.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_SecondLiveMedal *SecondLiveMedalSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _SecondLiveMedal.Contract.IsApprovedForAll(&_SecondLiveMedal.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_SecondLiveMedal *SecondLiveMedalCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _SecondLiveMedal.Contract.IsApprovedForAll(&_SecondLiveMedal.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_SecondLiveMedal *SecondLiveMedalCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _SecondLiveMedal.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_SecondLiveMedal *SecondLiveMedalSession) Name() (string, error) {
	return _SecondLiveMedal.Contract.Name(&_SecondLiveMedal.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_SecondLiveMedal *SecondLiveMedalCallerSession) Name() (string, error) {
	return _SecondLiveMedal.Contract.Name(&_SecondLiveMedal.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SecondLiveMedal *SecondLiveMedalCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SecondLiveMedal.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SecondLiveMedal *SecondLiveMedalSession) Owner() (common.Address, error) {
	return _SecondLiveMedal.Contract.Owner(&_SecondLiveMedal.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SecondLiveMedal *SecondLiveMedalCallerSession) Owner() (common.Address, error) {
	return _SecondLiveMedal.Contract.Owner(&_SecondLiveMedal.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_SecondLiveMedal *SecondLiveMedalCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _SecondLiveMedal.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_SecondLiveMedal *SecondLiveMedalSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _SecondLiveMedal.Contract.OwnerOf(&_SecondLiveMedal.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_SecondLiveMedal *SecondLiveMedalCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _SecondLiveMedal.Contract.OwnerOf(&_SecondLiveMedal.CallOpts, tokenId)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_SecondLiveMedal *SecondLiveMedalCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _SecondLiveMedal.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_SecondLiveMedal *SecondLiveMedalSession) Paused() (bool, error) {
	return _SecondLiveMedal.Contract.Paused(&_SecondLiveMedal.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_SecondLiveMedal *SecondLiveMedalCallerSession) Paused() (bool, error) {
	return _SecondLiveMedal.Contract.Paused(&_SecondLiveMedal.CallOpts)
}

// Pinfos is a free data retrieval call binding the contract method 0xdd3eb9bd.
//
// Solidity: function pinfos(uint256 ) view returns(uint256 pid, uint256 level, address master, bool canTranster)
func (_SecondLiveMedal *SecondLiveMedalCaller) Pinfos(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Pid         *big.Int
	Level       *big.Int
	Master      common.Address
	CanTranster bool
}, error) {
	var out []interface{}
	err := _SecondLiveMedal.contract.Call(opts, &out, "pinfos", arg0)

	outstruct := new(struct {
		Pid         *big.Int
		Level       *big.Int
		Master      common.Address
		CanTranster bool
	})

	outstruct.Pid = out[0].(*big.Int)
	outstruct.Level = out[1].(*big.Int)
	outstruct.Master = out[2].(common.Address)
	outstruct.CanTranster = out[3].(bool)

	return *outstruct, err

}

// Pinfos is a free data retrieval call binding the contract method 0xdd3eb9bd.
//
// Solidity: function pinfos(uint256 ) view returns(uint256 pid, uint256 level, address master, bool canTranster)
func (_SecondLiveMedal *SecondLiveMedalSession) Pinfos(arg0 *big.Int) (struct {
	Pid         *big.Int
	Level       *big.Int
	Master      common.Address
	CanTranster bool
}, error) {
	return _SecondLiveMedal.Contract.Pinfos(&_SecondLiveMedal.CallOpts, arg0)
}

// Pinfos is a free data retrieval call binding the contract method 0xdd3eb9bd.
//
// Solidity: function pinfos(uint256 ) view returns(uint256 pid, uint256 level, address master, bool canTranster)
func (_SecondLiveMedal *SecondLiveMedalCallerSession) Pinfos(arg0 *big.Int) (struct {
	Pid         *big.Int
	Level       *big.Int
	Master      common.Address
	CanTranster bool
}, error) {
	return _SecondLiveMedal.Contract.Pinfos(&_SecondLiveMedal.CallOpts, arg0)
}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 _tokenId, uint256 _salePrice) view returns(address, uint256)
func (_SecondLiveMedal *SecondLiveMedalCaller) RoyaltyInfo(opts *bind.CallOpts, _tokenId *big.Int, _salePrice *big.Int) (common.Address, *big.Int, error) {
	var out []interface{}
	err := _SecondLiveMedal.contract.Call(opts, &out, "royaltyInfo", _tokenId, _salePrice)

	if err != nil {
		return *new(common.Address), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 _tokenId, uint256 _salePrice) view returns(address, uint256)
func (_SecondLiveMedal *SecondLiveMedalSession) RoyaltyInfo(_tokenId *big.Int, _salePrice *big.Int) (common.Address, *big.Int, error) {
	return _SecondLiveMedal.Contract.RoyaltyInfo(&_SecondLiveMedal.CallOpts, _tokenId, _salePrice)
}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 _tokenId, uint256 _salePrice) view returns(address, uint256)
func (_SecondLiveMedal *SecondLiveMedalCallerSession) RoyaltyInfo(_tokenId *big.Int, _salePrice *big.Int) (common.Address, *big.Int, error) {
	return _SecondLiveMedal.Contract.RoyaltyInfo(&_SecondLiveMedal.CallOpts, _tokenId, _salePrice)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_SecondLiveMedal *SecondLiveMedalCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _SecondLiveMedal.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_SecondLiveMedal *SecondLiveMedalSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _SecondLiveMedal.Contract.SupportsInterface(&_SecondLiveMedal.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_SecondLiveMedal *SecondLiveMedalCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _SecondLiveMedal.Contract.SupportsInterface(&_SecondLiveMedal.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_SecondLiveMedal *SecondLiveMedalCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _SecondLiveMedal.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_SecondLiveMedal *SecondLiveMedalSession) Symbol() (string, error) {
	return _SecondLiveMedal.Contract.Symbol(&_SecondLiveMedal.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_SecondLiveMedal *SecondLiveMedalCallerSession) Symbol() (string, error) {
	return _SecondLiveMedal.Contract.Symbol(&_SecondLiveMedal.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_SecondLiveMedal *SecondLiveMedalCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _SecondLiveMedal.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_SecondLiveMedal *SecondLiveMedalSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _SecondLiveMedal.Contract.TokenByIndex(&_SecondLiveMedal.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_SecondLiveMedal *SecondLiveMedalCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _SecondLiveMedal.Contract.TokenByIndex(&_SecondLiveMedal.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_SecondLiveMedal *SecondLiveMedalCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _SecondLiveMedal.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_SecondLiveMedal *SecondLiveMedalSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _SecondLiveMedal.Contract.TokenOfOwnerByIndex(&_SecondLiveMedal.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_SecondLiveMedal *SecondLiveMedalCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _SecondLiveMedal.Contract.TokenOfOwnerByIndex(&_SecondLiveMedal.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_SecondLiveMedal *SecondLiveMedalCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _SecondLiveMedal.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_SecondLiveMedal *SecondLiveMedalSession) TokenURI(tokenId *big.Int) (string, error) {
	return _SecondLiveMedal.Contract.TokenURI(&_SecondLiveMedal.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_SecondLiveMedal *SecondLiveMedalCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _SecondLiveMedal.Contract.TokenURI(&_SecondLiveMedal.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_SecondLiveMedal *SecondLiveMedalCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SecondLiveMedal.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_SecondLiveMedal *SecondLiveMedalSession) TotalSupply() (*big.Int, error) {
	return _SecondLiveMedal.Contract.TotalSupply(&_SecondLiveMedal.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_SecondLiveMedal *SecondLiveMedalCallerSession) TotalSupply() (*big.Int, error) {
	return _SecondLiveMedal.Contract.TotalSupply(&_SecondLiveMedal.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_SecondLiveMedal *SecondLiveMedalSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.Approve(&_SecondLiveMedal.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.Approve(&_SecondLiveMedal.TransactOpts, to, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _id) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactor) Burn(opts *bind.TransactOpts, _id *big.Int) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "burn", _id)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _id) returns()
func (_SecondLiveMedal *SecondLiveMedalSession) Burn(_id *big.Int) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.Burn(&_SecondLiveMedal.TransactOpts, _id)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _id) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) Burn(_id *big.Int) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.Burn(&_SecondLiveMedal.TransactOpts, _id)
}

// DeleteDefaultRoyalty is a paid mutator transaction binding the contract method 0xaa1b103f.
//
// Solidity: function deleteDefaultRoyalty() returns()
func (_SecondLiveMedal *SecondLiveMedalTransactor) DeleteDefaultRoyalty(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "deleteDefaultRoyalty")
}

// DeleteDefaultRoyalty is a paid mutator transaction binding the contract method 0xaa1b103f.
//
// Solidity: function deleteDefaultRoyalty() returns()
func (_SecondLiveMedal *SecondLiveMedalSession) DeleteDefaultRoyalty() (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.DeleteDefaultRoyalty(&_SecondLiveMedal.TransactOpts)
}

// DeleteDefaultRoyalty is a paid mutator transaction binding the contract method 0xaa1b103f.
//
// Solidity: function deleteDefaultRoyalty() returns()
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) DeleteDefaultRoyalty() (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.DeleteDefaultRoyalty(&_SecondLiveMedal.TransactOpts)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_SecondLiveMedal *SecondLiveMedalSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.GrantRole(&_SecondLiveMedal.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.GrantRole(&_SecondLiveMedal.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _owner) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactor) Initialize(opts *bind.TransactOpts, _owner common.Address) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "initialize", _owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _owner) returns()
func (_SecondLiveMedal *SecondLiveMedalSession) Initialize(_owner common.Address) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.Initialize(&_SecondLiveMedal.TransactOpts, _owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _owner) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) Initialize(_owner common.Address) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.Initialize(&_SecondLiveMedal.TransactOpts, _owner)
}

// Mint is a paid mutator transaction binding the contract method 0xc94c1bd4.
//
// Solidity: function mint(address to, (uint256,uint256,address,bool) pinfo) returns(uint256)
func (_SecondLiveMedal *SecondLiveMedalTransactor) Mint(opts *bind.TransactOpts, to common.Address, pinfo ISecondLiveMedalPinfo) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "mint", to, pinfo)
}

// Mint is a paid mutator transaction binding the contract method 0xc94c1bd4.
//
// Solidity: function mint(address to, (uint256,uint256,address,bool) pinfo) returns(uint256)
func (_SecondLiveMedal *SecondLiveMedalSession) Mint(to common.Address, pinfo ISecondLiveMedalPinfo) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.Mint(&_SecondLiveMedal.TransactOpts, to, pinfo)
}

// Mint is a paid mutator transaction binding the contract method 0xc94c1bd4.
//
// Solidity: function mint(address to, (uint256,uint256,address,bool) pinfo) returns(uint256)
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) Mint(to common.Address, pinfo ISecondLiveMedalPinfo) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.Mint(&_SecondLiveMedal.TransactOpts, to, pinfo)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_SecondLiveMedal *SecondLiveMedalTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_SecondLiveMedal *SecondLiveMedalSession) Pause() (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.Pause(&_SecondLiveMedal.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) Pause() (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.Pause(&_SecondLiveMedal.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SecondLiveMedal *SecondLiveMedalTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SecondLiveMedal *SecondLiveMedalSession) RenounceOwnership() (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.RenounceOwnership(&_SecondLiveMedal.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.RenounceOwnership(&_SecondLiveMedal.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_SecondLiveMedal *SecondLiveMedalSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.RenounceRole(&_SecondLiveMedal.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.RenounceRole(&_SecondLiveMedal.TransactOpts, role, account)
}

// ResetTokenRoyalty is a paid mutator transaction binding the contract method 0x8a616bc0.
//
// Solidity: function resetTokenRoyalty(uint256 tokenId) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactor) ResetTokenRoyalty(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "resetTokenRoyalty", tokenId)
}

// ResetTokenRoyalty is a paid mutator transaction binding the contract method 0x8a616bc0.
//
// Solidity: function resetTokenRoyalty(uint256 tokenId) returns()
func (_SecondLiveMedal *SecondLiveMedalSession) ResetTokenRoyalty(tokenId *big.Int) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.ResetTokenRoyalty(&_SecondLiveMedal.TransactOpts, tokenId)
}

// ResetTokenRoyalty is a paid mutator transaction binding the contract method 0x8a616bc0.
//
// Solidity: function resetTokenRoyalty(uint256 tokenId) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) ResetTokenRoyalty(tokenId *big.Int) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.ResetTokenRoyalty(&_SecondLiveMedal.TransactOpts, tokenId)
}

// RevokeMinterAdmin is a paid mutator transaction binding the contract method 0x369088f0.
//
// Solidity: function revokeMinterAdmin(address minterAdmin) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactor) RevokeMinterAdmin(opts *bind.TransactOpts, minterAdmin common.Address) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "revokeMinterAdmin", minterAdmin)
}

// RevokeMinterAdmin is a paid mutator transaction binding the contract method 0x369088f0.
//
// Solidity: function revokeMinterAdmin(address minterAdmin) returns()
func (_SecondLiveMedal *SecondLiveMedalSession) RevokeMinterAdmin(minterAdmin common.Address) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.RevokeMinterAdmin(&_SecondLiveMedal.TransactOpts, minterAdmin)
}

// RevokeMinterAdmin is a paid mutator transaction binding the contract method 0x369088f0.
//
// Solidity: function revokeMinterAdmin(address minterAdmin) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) RevokeMinterAdmin(minterAdmin common.Address) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.RevokeMinterAdmin(&_SecondLiveMedal.TransactOpts, minterAdmin)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_SecondLiveMedal *SecondLiveMedalSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.RevokeRole(&_SecondLiveMedal.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.RevokeRole(&_SecondLiveMedal.TransactOpts, role, account)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_SecondLiveMedal *SecondLiveMedalSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.SafeTransferFrom(&_SecondLiveMedal.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.SafeTransferFrom(&_SecondLiveMedal.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_SecondLiveMedal *SecondLiveMedalSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.SafeTransferFrom0(&_SecondLiveMedal.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.SafeTransferFrom0(&_SecondLiveMedal.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_SecondLiveMedal *SecondLiveMedalSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.SetApprovalForAll(&_SecondLiveMedal.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.SetApprovalForAll(&_SecondLiveMedal.TransactOpts, operator, approved)
}

// SetDefaultRoyalty is a paid mutator transaction binding the contract method 0x04634d8d.
//
// Solidity: function setDefaultRoyalty(address receiver, uint96 feeNumerator) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactor) SetDefaultRoyalty(opts *bind.TransactOpts, receiver common.Address, feeNumerator *big.Int) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "setDefaultRoyalty", receiver, feeNumerator)
}

// SetDefaultRoyalty is a paid mutator transaction binding the contract method 0x04634d8d.
//
// Solidity: function setDefaultRoyalty(address receiver, uint96 feeNumerator) returns()
func (_SecondLiveMedal *SecondLiveMedalSession) SetDefaultRoyalty(receiver common.Address, feeNumerator *big.Int) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.SetDefaultRoyalty(&_SecondLiveMedal.TransactOpts, receiver, feeNumerator)
}

// SetDefaultRoyalty is a paid mutator transaction binding the contract method 0x04634d8d.
//
// Solidity: function setDefaultRoyalty(address receiver, uint96 feeNumerator) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) SetDefaultRoyalty(receiver common.Address, feeNumerator *big.Int) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.SetDefaultRoyalty(&_SecondLiveMedal.TransactOpts, receiver, feeNumerator)
}

// SetMinterAdmin is a paid mutator transaction binding the contract method 0x99235f39.
//
// Solidity: function setMinterAdmin(address minterAdmin) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactor) SetMinterAdmin(opts *bind.TransactOpts, minterAdmin common.Address) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "setMinterAdmin", minterAdmin)
}

// SetMinterAdmin is a paid mutator transaction binding the contract method 0x99235f39.
//
// Solidity: function setMinterAdmin(address minterAdmin) returns()
func (_SecondLiveMedal *SecondLiveMedalSession) SetMinterAdmin(minterAdmin common.Address) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.SetMinterAdmin(&_SecondLiveMedal.TransactOpts, minterAdmin)
}

// SetMinterAdmin is a paid mutator transaction binding the contract method 0x99235f39.
//
// Solidity: function setMinterAdmin(address minterAdmin) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) SetMinterAdmin(minterAdmin common.Address) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.SetMinterAdmin(&_SecondLiveMedal.TransactOpts, minterAdmin)
}

// SetTokenRoyalty is a paid mutator transaction binding the contract method 0x5944c753.
//
// Solidity: function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactor) SetTokenRoyalty(opts *bind.TransactOpts, tokenId *big.Int, receiver common.Address, feeNumerator *big.Int) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "setTokenRoyalty", tokenId, receiver, feeNumerator)
}

// SetTokenRoyalty is a paid mutator transaction binding the contract method 0x5944c753.
//
// Solidity: function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) returns()
func (_SecondLiveMedal *SecondLiveMedalSession) SetTokenRoyalty(tokenId *big.Int, receiver common.Address, feeNumerator *big.Int) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.SetTokenRoyalty(&_SecondLiveMedal.TransactOpts, tokenId, receiver, feeNumerator)
}

// SetTokenRoyalty is a paid mutator transaction binding the contract method 0x5944c753.
//
// Solidity: function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) SetTokenRoyalty(tokenId *big.Int, receiver common.Address, feeNumerator *big.Int) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.SetTokenRoyalty(&_SecondLiveMedal.TransactOpts, tokenId, receiver, feeNumerator)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_SecondLiveMedal *SecondLiveMedalSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.TransferFrom(&_SecondLiveMedal.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.TransferFrom(&_SecondLiveMedal.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SecondLiveMedal *SecondLiveMedalSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.TransferOwnership(&_SecondLiveMedal.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.TransferOwnership(&_SecondLiveMedal.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_SecondLiveMedal *SecondLiveMedalTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_SecondLiveMedal *SecondLiveMedalSession) Unpause() (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.Unpause(&_SecondLiveMedal.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) Unpause() (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.Unpause(&_SecondLiveMedal.TransactOpts)
}

// UpdateTokenURI is a paid mutator transaction binding the contract method 0x18e97fd1.
//
// Solidity: function updateTokenURI(uint256 tokenId, string _uri) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactor) UpdateTokenURI(opts *bind.TransactOpts, tokenId *big.Int, _uri string) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "updateTokenURI", tokenId, _uri)
}

// UpdateTokenURI is a paid mutator transaction binding the contract method 0x18e97fd1.
//
// Solidity: function updateTokenURI(uint256 tokenId, string _uri) returns()
func (_SecondLiveMedal *SecondLiveMedalSession) UpdateTokenURI(tokenId *big.Int, _uri string) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.UpdateTokenURI(&_SecondLiveMedal.TransactOpts, tokenId, _uri)
}

// UpdateTokenURI is a paid mutator transaction binding the contract method 0x18e97fd1.
//
// Solidity: function updateTokenURI(uint256 tokenId, string _uri) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) UpdateTokenURI(tokenId *big.Int, _uri string) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.UpdateTokenURI(&_SecondLiveMedal.TransactOpts, tokenId, _uri)
}

// UpdateURIPrefix is a paid mutator transaction binding the contract method 0xbceb2a22.
//
// Solidity: function updateURIPrefix(string baseURI_) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactor) UpdateURIPrefix(opts *bind.TransactOpts, baseURI_ string) (*types.Transaction, error) {
	return _SecondLiveMedal.contract.Transact(opts, "updateURIPrefix", baseURI_)
}

// UpdateURIPrefix is a paid mutator transaction binding the contract method 0xbceb2a22.
//
// Solidity: function updateURIPrefix(string baseURI_) returns()
func (_SecondLiveMedal *SecondLiveMedalSession) UpdateURIPrefix(baseURI_ string) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.UpdateURIPrefix(&_SecondLiveMedal.TransactOpts, baseURI_)
}

// UpdateURIPrefix is a paid mutator transaction binding the contract method 0xbceb2a22.
//
// Solidity: function updateURIPrefix(string baseURI_) returns()
func (_SecondLiveMedal *SecondLiveMedalTransactorSession) UpdateURIPrefix(baseURI_ string) (*types.Transaction, error) {
	return _SecondLiveMedal.Contract.UpdateURIPrefix(&_SecondLiveMedal.TransactOpts, baseURI_)
}

// SecondLiveMedalApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the SecondLiveMedal contract.
type SecondLiveMedalApprovalIterator struct {
	Event *SecondLiveMedalApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecondLiveMedalApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecondLiveMedalApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecondLiveMedalApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecondLiveMedalApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecondLiveMedalApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecondLiveMedalApproval represents a Approval event raised by the SecondLiveMedal contract.
type SecondLiveMedalApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_SecondLiveMedal *SecondLiveMedalFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*SecondLiveMedalApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &SecondLiveMedalApprovalIterator{contract: _SecondLiveMedal.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_SecondLiveMedal *SecondLiveMedalFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *SecondLiveMedalApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecondLiveMedalApproval)
				if err := _SecondLiveMedal.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_SecondLiveMedal *SecondLiveMedalFilterer) ParseApproval(log types.Log) (*SecondLiveMedalApproval, error) {
	event := new(SecondLiveMedalApproval)
	if err := _SecondLiveMedal.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecondLiveMedalApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the SecondLiveMedal contract.
type SecondLiveMedalApprovalForAllIterator struct {
	Event *SecondLiveMedalApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecondLiveMedalApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecondLiveMedalApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecondLiveMedalApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecondLiveMedalApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecondLiveMedalApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecondLiveMedalApprovalForAll represents a ApprovalForAll event raised by the SecondLiveMedal contract.
type SecondLiveMedalApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_SecondLiveMedal *SecondLiveMedalFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*SecondLiveMedalApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &SecondLiveMedalApprovalForAllIterator{contract: _SecondLiveMedal.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_SecondLiveMedal *SecondLiveMedalFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *SecondLiveMedalApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecondLiveMedalApprovalForAll)
				if err := _SecondLiveMedal.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_SecondLiveMedal *SecondLiveMedalFilterer) ParseApprovalForAll(log types.Log) (*SecondLiveMedalApprovalForAll, error) {
	event := new(SecondLiveMedalApprovalForAll)
	if err := _SecondLiveMedal.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecondLiveMedalDefaultRoyaltyIterator is returned from FilterDefaultRoyalty and is used to iterate over the raw logs and unpacked data for DefaultRoyalty events raised by the SecondLiveMedal contract.
type SecondLiveMedalDefaultRoyaltyIterator struct {
	Event *SecondLiveMedalDefaultRoyalty // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecondLiveMedalDefaultRoyaltyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecondLiveMedalDefaultRoyalty)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecondLiveMedalDefaultRoyalty)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecondLiveMedalDefaultRoyaltyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecondLiveMedalDefaultRoyaltyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecondLiveMedalDefaultRoyalty represents a DefaultRoyalty event raised by the SecondLiveMedal contract.
type SecondLiveMedalDefaultRoyalty struct {
	Receiver     common.Address
	FeeNumerator *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDefaultRoyalty is a free log retrieval operation binding the contract event 0x378e0d79d5bc01ff46b21ccbdabc124751f2f6880425e873742b04c2e3a65c6c.
//
// Solidity: event DefaultRoyalty(address indexed receiver, uint96 indexed feeNumerator)
func (_SecondLiveMedal *SecondLiveMedalFilterer) FilterDefaultRoyalty(opts *bind.FilterOpts, receiver []common.Address, feeNumerator []*big.Int) (*SecondLiveMedalDefaultRoyaltyIterator, error) {

	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var feeNumeratorRule []interface{}
	for _, feeNumeratorItem := range feeNumerator {
		feeNumeratorRule = append(feeNumeratorRule, feeNumeratorItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.FilterLogs(opts, "DefaultRoyalty", receiverRule, feeNumeratorRule)
	if err != nil {
		return nil, err
	}
	return &SecondLiveMedalDefaultRoyaltyIterator{contract: _SecondLiveMedal.contract, event: "DefaultRoyalty", logs: logs, sub: sub}, nil
}

// WatchDefaultRoyalty is a free log subscription operation binding the contract event 0x378e0d79d5bc01ff46b21ccbdabc124751f2f6880425e873742b04c2e3a65c6c.
//
// Solidity: event DefaultRoyalty(address indexed receiver, uint96 indexed feeNumerator)
func (_SecondLiveMedal *SecondLiveMedalFilterer) WatchDefaultRoyalty(opts *bind.WatchOpts, sink chan<- *SecondLiveMedalDefaultRoyalty, receiver []common.Address, feeNumerator []*big.Int) (event.Subscription, error) {

	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var feeNumeratorRule []interface{}
	for _, feeNumeratorItem := range feeNumerator {
		feeNumeratorRule = append(feeNumeratorRule, feeNumeratorItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.WatchLogs(opts, "DefaultRoyalty", receiverRule, feeNumeratorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecondLiveMedalDefaultRoyalty)
				if err := _SecondLiveMedal.contract.UnpackLog(event, "DefaultRoyalty", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDefaultRoyalty is a log parse operation binding the contract event 0x378e0d79d5bc01ff46b21ccbdabc124751f2f6880425e873742b04c2e3a65c6c.
//
// Solidity: event DefaultRoyalty(address indexed receiver, uint96 indexed feeNumerator)
func (_SecondLiveMedal *SecondLiveMedalFilterer) ParseDefaultRoyalty(log types.Log) (*SecondLiveMedalDefaultRoyalty, error) {
	event := new(SecondLiveMedalDefaultRoyalty)
	if err := _SecondLiveMedal.contract.UnpackLog(event, "DefaultRoyalty", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecondLiveMedalOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the SecondLiveMedal contract.
type SecondLiveMedalOwnershipTransferredIterator struct {
	Event *SecondLiveMedalOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecondLiveMedalOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecondLiveMedalOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecondLiveMedalOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecondLiveMedalOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecondLiveMedalOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecondLiveMedalOwnershipTransferred represents a OwnershipTransferred event raised by the SecondLiveMedal contract.
type SecondLiveMedalOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SecondLiveMedal *SecondLiveMedalFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*SecondLiveMedalOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &SecondLiveMedalOwnershipTransferredIterator{contract: _SecondLiveMedal.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SecondLiveMedal *SecondLiveMedalFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SecondLiveMedalOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecondLiveMedalOwnershipTransferred)
				if err := _SecondLiveMedal.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SecondLiveMedal *SecondLiveMedalFilterer) ParseOwnershipTransferred(log types.Log) (*SecondLiveMedalOwnershipTransferred, error) {
	event := new(SecondLiveMedalOwnershipTransferred)
	if err := _SecondLiveMedal.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecondLiveMedalPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the SecondLiveMedal contract.
type SecondLiveMedalPausedIterator struct {
	Event *SecondLiveMedalPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecondLiveMedalPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecondLiveMedalPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecondLiveMedalPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecondLiveMedalPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecondLiveMedalPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecondLiveMedalPaused represents a Paused event raised by the SecondLiveMedal contract.
type SecondLiveMedalPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_SecondLiveMedal *SecondLiveMedalFilterer) FilterPaused(opts *bind.FilterOpts) (*SecondLiveMedalPausedIterator, error) {

	logs, sub, err := _SecondLiveMedal.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &SecondLiveMedalPausedIterator{contract: _SecondLiveMedal.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_SecondLiveMedal *SecondLiveMedalFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *SecondLiveMedalPaused) (event.Subscription, error) {

	logs, sub, err := _SecondLiveMedal.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecondLiveMedalPaused)
				if err := _SecondLiveMedal.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_SecondLiveMedal *SecondLiveMedalFilterer) ParsePaused(log types.Log) (*SecondLiveMedalPaused, error) {
	event := new(SecondLiveMedalPaused)
	if err := _SecondLiveMedal.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecondLiveMedalRevokeMinterAdminIterator is returned from FilterRevokeMinterAdmin and is used to iterate over the raw logs and unpacked data for RevokeMinterAdmin events raised by the SecondLiveMedal contract.
type SecondLiveMedalRevokeMinterAdminIterator struct {
	Event *SecondLiveMedalRevokeMinterAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecondLiveMedalRevokeMinterAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecondLiveMedalRevokeMinterAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecondLiveMedalRevokeMinterAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecondLiveMedalRevokeMinterAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecondLiveMedalRevokeMinterAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecondLiveMedalRevokeMinterAdmin represents a RevokeMinterAdmin event raised by the SecondLiveMedal contract.
type SecondLiveMedalRevokeMinterAdmin struct {
	AdminRole [32]byte
	Admin     common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRevokeMinterAdmin is a free log retrieval operation binding the contract event 0x66094e85404f90ff983a85ad6e7d3107aa2de3c40e8012deeceaad44806e9c80.
//
// Solidity: event RevokeMinterAdmin(bytes32 adminRole, address admin)
func (_SecondLiveMedal *SecondLiveMedalFilterer) FilterRevokeMinterAdmin(opts *bind.FilterOpts) (*SecondLiveMedalRevokeMinterAdminIterator, error) {

	logs, sub, err := _SecondLiveMedal.contract.FilterLogs(opts, "RevokeMinterAdmin")
	if err != nil {
		return nil, err
	}
	return &SecondLiveMedalRevokeMinterAdminIterator{contract: _SecondLiveMedal.contract, event: "RevokeMinterAdmin", logs: logs, sub: sub}, nil
}

// WatchRevokeMinterAdmin is a free log subscription operation binding the contract event 0x66094e85404f90ff983a85ad6e7d3107aa2de3c40e8012deeceaad44806e9c80.
//
// Solidity: event RevokeMinterAdmin(bytes32 adminRole, address admin)
func (_SecondLiveMedal *SecondLiveMedalFilterer) WatchRevokeMinterAdmin(opts *bind.WatchOpts, sink chan<- *SecondLiveMedalRevokeMinterAdmin) (event.Subscription, error) {

	logs, sub, err := _SecondLiveMedal.contract.WatchLogs(opts, "RevokeMinterAdmin")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecondLiveMedalRevokeMinterAdmin)
				if err := _SecondLiveMedal.contract.UnpackLog(event, "RevokeMinterAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevokeMinterAdmin is a log parse operation binding the contract event 0x66094e85404f90ff983a85ad6e7d3107aa2de3c40e8012deeceaad44806e9c80.
//
// Solidity: event RevokeMinterAdmin(bytes32 adminRole, address admin)
func (_SecondLiveMedal *SecondLiveMedalFilterer) ParseRevokeMinterAdmin(log types.Log) (*SecondLiveMedalRevokeMinterAdmin, error) {
	event := new(SecondLiveMedalRevokeMinterAdmin)
	if err := _SecondLiveMedal.contract.UnpackLog(event, "RevokeMinterAdmin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecondLiveMedalRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the SecondLiveMedal contract.
type SecondLiveMedalRoleAdminChangedIterator struct {
	Event *SecondLiveMedalRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecondLiveMedalRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecondLiveMedalRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecondLiveMedalRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecondLiveMedalRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecondLiveMedalRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecondLiveMedalRoleAdminChanged represents a RoleAdminChanged event raised by the SecondLiveMedal contract.
type SecondLiveMedalRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_SecondLiveMedal *SecondLiveMedalFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*SecondLiveMedalRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &SecondLiveMedalRoleAdminChangedIterator{contract: _SecondLiveMedal.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_SecondLiveMedal *SecondLiveMedalFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *SecondLiveMedalRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecondLiveMedalRoleAdminChanged)
				if err := _SecondLiveMedal.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_SecondLiveMedal *SecondLiveMedalFilterer) ParseRoleAdminChanged(log types.Log) (*SecondLiveMedalRoleAdminChanged, error) {
	event := new(SecondLiveMedalRoleAdminChanged)
	if err := _SecondLiveMedal.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecondLiveMedalRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the SecondLiveMedal contract.
type SecondLiveMedalRoleGrantedIterator struct {
	Event *SecondLiveMedalRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecondLiveMedalRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecondLiveMedalRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecondLiveMedalRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecondLiveMedalRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecondLiveMedalRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecondLiveMedalRoleGranted represents a RoleGranted event raised by the SecondLiveMedal contract.
type SecondLiveMedalRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_SecondLiveMedal *SecondLiveMedalFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*SecondLiveMedalRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &SecondLiveMedalRoleGrantedIterator{contract: _SecondLiveMedal.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_SecondLiveMedal *SecondLiveMedalFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *SecondLiveMedalRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecondLiveMedalRoleGranted)
				if err := _SecondLiveMedal.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_SecondLiveMedal *SecondLiveMedalFilterer) ParseRoleGranted(log types.Log) (*SecondLiveMedalRoleGranted, error) {
	event := new(SecondLiveMedalRoleGranted)
	if err := _SecondLiveMedal.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecondLiveMedalRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the SecondLiveMedal contract.
type SecondLiveMedalRoleRevokedIterator struct {
	Event *SecondLiveMedalRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecondLiveMedalRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecondLiveMedalRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecondLiveMedalRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecondLiveMedalRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecondLiveMedalRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecondLiveMedalRoleRevoked represents a RoleRevoked event raised by the SecondLiveMedal contract.
type SecondLiveMedalRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_SecondLiveMedal *SecondLiveMedalFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*SecondLiveMedalRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &SecondLiveMedalRoleRevokedIterator{contract: _SecondLiveMedal.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_SecondLiveMedal *SecondLiveMedalFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *SecondLiveMedalRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecondLiveMedalRoleRevoked)
				if err := _SecondLiveMedal.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_SecondLiveMedal *SecondLiveMedalFilterer) ParseRoleRevoked(log types.Log) (*SecondLiveMedalRoleRevoked, error) {
	event := new(SecondLiveMedalRoleRevoked)
	if err := _SecondLiveMedal.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecondLiveMedalSecondLiveMedalMintIterator is returned from FilterSecondLiveMedalMint and is used to iterate over the raw logs and unpacked data for SecondLiveMedalMint events raised by the SecondLiveMedal contract.
type SecondLiveMedalSecondLiveMedalMintIterator struct {
	Event *SecondLiveMedalSecondLiveMedalMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecondLiveMedalSecondLiveMedalMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecondLiveMedalSecondLiveMedalMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecondLiveMedalSecondLiveMedalMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecondLiveMedalSecondLiveMedalMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecondLiveMedalSecondLiveMedalMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecondLiveMedalSecondLiveMedalMint represents a SecondLiveMedalMint event raised by the SecondLiveMedal contract.
type SecondLiveMedalSecondLiveMedalMint struct {
	Account common.Address
	TokenId *big.Int
	Pinfo   ISecondLiveMedalPinfo
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSecondLiveMedalMint is a free log retrieval operation binding the contract event 0x9c6586c479c35ac13b6cc2d67784fcf5689941956c7eacf21e267d65caf6b30c.
//
// Solidity: event SecondLiveMedalMint(address indexed account, uint256 indexed tokenId, (uint256,uint256,address,bool) pinfo)
func (_SecondLiveMedal *SecondLiveMedalFilterer) FilterSecondLiveMedalMint(opts *bind.FilterOpts, account []common.Address, tokenId []*big.Int) (*SecondLiveMedalSecondLiveMedalMintIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.FilterLogs(opts, "SecondLiveMedalMint", accountRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &SecondLiveMedalSecondLiveMedalMintIterator{contract: _SecondLiveMedal.contract, event: "SecondLiveMedalMint", logs: logs, sub: sub}, nil
}

// WatchSecondLiveMedalMint is a free log subscription operation binding the contract event 0x9c6586c479c35ac13b6cc2d67784fcf5689941956c7eacf21e267d65caf6b30c.
//
// Solidity: event SecondLiveMedalMint(address indexed account, uint256 indexed tokenId, (uint256,uint256,address,bool) pinfo)
func (_SecondLiveMedal *SecondLiveMedalFilterer) WatchSecondLiveMedalMint(opts *bind.WatchOpts, sink chan<- *SecondLiveMedalSecondLiveMedalMint, account []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.WatchLogs(opts, "SecondLiveMedalMint", accountRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecondLiveMedalSecondLiveMedalMint)
				if err := _SecondLiveMedal.contract.UnpackLog(event, "SecondLiveMedalMint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSecondLiveMedalMint is a log parse operation binding the contract event 0x9c6586c479c35ac13b6cc2d67784fcf5689941956c7eacf21e267d65caf6b30c.
//
// Solidity: event SecondLiveMedalMint(address indexed account, uint256 indexed tokenId, (uint256,uint256,address,bool) pinfo)
func (_SecondLiveMedal *SecondLiveMedalFilterer) ParseSecondLiveMedalMint(log types.Log) (*SecondLiveMedalSecondLiveMedalMint, error) {
	event := new(SecondLiveMedalSecondLiveMedalMint)
	if err := _SecondLiveMedal.contract.UnpackLog(event, "SecondLiveMedalMint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecondLiveMedalSetMinterAdminIterator is returned from FilterSetMinterAdmin and is used to iterate over the raw logs and unpacked data for SetMinterAdmin events raised by the SecondLiveMedal contract.
type SecondLiveMedalSetMinterAdminIterator struct {
	Event *SecondLiveMedalSetMinterAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecondLiveMedalSetMinterAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecondLiveMedalSetMinterAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecondLiveMedalSetMinterAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecondLiveMedalSetMinterAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecondLiveMedalSetMinterAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecondLiveMedalSetMinterAdmin represents a SetMinterAdmin event raised by the SecondLiveMedal contract.
type SecondLiveMedalSetMinterAdmin struct {
	Role      [32]byte
	AdminRole [32]byte
	Admin     common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSetMinterAdmin is a free log retrieval operation binding the contract event 0xec9b6dc2d06e32f5e9fdce0cee0f7443bcb99666a145147f25e659e87c5dd3f1.
//
// Solidity: event SetMinterAdmin(bytes32 role, bytes32 adminRole, address admin)
func (_SecondLiveMedal *SecondLiveMedalFilterer) FilterSetMinterAdmin(opts *bind.FilterOpts) (*SecondLiveMedalSetMinterAdminIterator, error) {

	logs, sub, err := _SecondLiveMedal.contract.FilterLogs(opts, "SetMinterAdmin")
	if err != nil {
		return nil, err
	}
	return &SecondLiveMedalSetMinterAdminIterator{contract: _SecondLiveMedal.contract, event: "SetMinterAdmin", logs: logs, sub: sub}, nil
}

// WatchSetMinterAdmin is a free log subscription operation binding the contract event 0xec9b6dc2d06e32f5e9fdce0cee0f7443bcb99666a145147f25e659e87c5dd3f1.
//
// Solidity: event SetMinterAdmin(bytes32 role, bytes32 adminRole, address admin)
func (_SecondLiveMedal *SecondLiveMedalFilterer) WatchSetMinterAdmin(opts *bind.WatchOpts, sink chan<- *SecondLiveMedalSetMinterAdmin) (event.Subscription, error) {

	logs, sub, err := _SecondLiveMedal.contract.WatchLogs(opts, "SetMinterAdmin")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecondLiveMedalSetMinterAdmin)
				if err := _SecondLiveMedal.contract.UnpackLog(event, "SetMinterAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetMinterAdmin is a log parse operation binding the contract event 0xec9b6dc2d06e32f5e9fdce0cee0f7443bcb99666a145147f25e659e87c5dd3f1.
//
// Solidity: event SetMinterAdmin(bytes32 role, bytes32 adminRole, address admin)
func (_SecondLiveMedal *SecondLiveMedalFilterer) ParseSetMinterAdmin(log types.Log) (*SecondLiveMedalSetMinterAdmin, error) {
	event := new(SecondLiveMedalSetMinterAdmin)
	if err := _SecondLiveMedal.contract.UnpackLog(event, "SetMinterAdmin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecondLiveMedalSetTokenURIIterator is returned from FilterSetTokenURI and is used to iterate over the raw logs and unpacked data for SetTokenURI events raised by the SecondLiveMedal contract.
type SecondLiveMedalSetTokenURIIterator struct {
	Event *SecondLiveMedalSetTokenURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecondLiveMedalSetTokenURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecondLiveMedalSetTokenURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecondLiveMedalSetTokenURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecondLiveMedalSetTokenURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecondLiveMedalSetTokenURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecondLiveMedalSetTokenURI represents a SetTokenURI event raised by the SecondLiveMedal contract.
type SecondLiveMedalSetTokenURI struct {
	TokenId *big.Int
	Uri     string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSetTokenURI is a free log retrieval operation binding the contract event 0xd2d827dddfc9c9a02afc5fc68d3251684b36e213a7999ebd90a861f25df4077e.
//
// Solidity: event SetTokenURI(uint256 indexed tokenId, string uri)
func (_SecondLiveMedal *SecondLiveMedalFilterer) FilterSetTokenURI(opts *bind.FilterOpts, tokenId []*big.Int) (*SecondLiveMedalSetTokenURIIterator, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.FilterLogs(opts, "SetTokenURI", tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &SecondLiveMedalSetTokenURIIterator{contract: _SecondLiveMedal.contract, event: "SetTokenURI", logs: logs, sub: sub}, nil
}

// WatchSetTokenURI is a free log subscription operation binding the contract event 0xd2d827dddfc9c9a02afc5fc68d3251684b36e213a7999ebd90a861f25df4077e.
//
// Solidity: event SetTokenURI(uint256 indexed tokenId, string uri)
func (_SecondLiveMedal *SecondLiveMedalFilterer) WatchSetTokenURI(opts *bind.WatchOpts, sink chan<- *SecondLiveMedalSetTokenURI, tokenId []*big.Int) (event.Subscription, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.WatchLogs(opts, "SetTokenURI", tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecondLiveMedalSetTokenURI)
				if err := _SecondLiveMedal.contract.UnpackLog(event, "SetTokenURI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetTokenURI is a log parse operation binding the contract event 0xd2d827dddfc9c9a02afc5fc68d3251684b36e213a7999ebd90a861f25df4077e.
//
// Solidity: event SetTokenURI(uint256 indexed tokenId, string uri)
func (_SecondLiveMedal *SecondLiveMedalFilterer) ParseSetTokenURI(log types.Log) (*SecondLiveMedalSetTokenURI, error) {
	event := new(SecondLiveMedalSetTokenURI)
	if err := _SecondLiveMedal.contract.UnpackLog(event, "SetTokenURI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecondLiveMedalTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the SecondLiveMedal contract.
type SecondLiveMedalTransferIterator struct {
	Event *SecondLiveMedalTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecondLiveMedalTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecondLiveMedalTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecondLiveMedalTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecondLiveMedalTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecondLiveMedalTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecondLiveMedalTransfer represents a Transfer event raised by the SecondLiveMedal contract.
type SecondLiveMedalTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_SecondLiveMedal *SecondLiveMedalFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*SecondLiveMedalTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &SecondLiveMedalTransferIterator{contract: _SecondLiveMedal.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_SecondLiveMedal *SecondLiveMedalFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *SecondLiveMedalTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecondLiveMedalTransfer)
				if err := _SecondLiveMedal.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_SecondLiveMedal *SecondLiveMedalFilterer) ParseTransfer(log types.Log) (*SecondLiveMedalTransfer, error) {
	event := new(SecondLiveMedalTransfer)
	if err := _SecondLiveMedal.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecondLiveMedalURIPrefixIterator is returned from FilterURIPrefix and is used to iterate over the raw logs and unpacked data for URIPrefix events raised by the SecondLiveMedal contract.
type SecondLiveMedalURIPrefixIterator struct {
	Event *SecondLiveMedalURIPrefix // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecondLiveMedalURIPrefixIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecondLiveMedalURIPrefix)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecondLiveMedalURIPrefix)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecondLiveMedalURIPrefixIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecondLiveMedalURIPrefixIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecondLiveMedalURIPrefix represents a URIPrefix event raised by the SecondLiveMedal contract.
type SecondLiveMedalURIPrefix struct {
	BaseURI common.Hash
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterURIPrefix is a free log retrieval operation binding the contract event 0x5b2f71ae2236304212a8f3529aa50b6ae9fe556cc6a4af4f9b51f89328d057f2.
//
// Solidity: event URIPrefix(string indexed baseURI)
func (_SecondLiveMedal *SecondLiveMedalFilterer) FilterURIPrefix(opts *bind.FilterOpts, baseURI []string) (*SecondLiveMedalURIPrefixIterator, error) {

	var baseURIRule []interface{}
	for _, baseURIItem := range baseURI {
		baseURIRule = append(baseURIRule, baseURIItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.FilterLogs(opts, "URIPrefix", baseURIRule)
	if err != nil {
		return nil, err
	}
	return &SecondLiveMedalURIPrefixIterator{contract: _SecondLiveMedal.contract, event: "URIPrefix", logs: logs, sub: sub}, nil
}

// WatchURIPrefix is a free log subscription operation binding the contract event 0x5b2f71ae2236304212a8f3529aa50b6ae9fe556cc6a4af4f9b51f89328d057f2.
//
// Solidity: event URIPrefix(string indexed baseURI)
func (_SecondLiveMedal *SecondLiveMedalFilterer) WatchURIPrefix(opts *bind.WatchOpts, sink chan<- *SecondLiveMedalURIPrefix, baseURI []string) (event.Subscription, error) {

	var baseURIRule []interface{}
	for _, baseURIItem := range baseURI {
		baseURIRule = append(baseURIRule, baseURIItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.WatchLogs(opts, "URIPrefix", baseURIRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecondLiveMedalURIPrefix)
				if err := _SecondLiveMedal.contract.UnpackLog(event, "URIPrefix", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURIPrefix is a log parse operation binding the contract event 0x5b2f71ae2236304212a8f3529aa50b6ae9fe556cc6a4af4f9b51f89328d057f2.
//
// Solidity: event URIPrefix(string indexed baseURI)
func (_SecondLiveMedal *SecondLiveMedalFilterer) ParseURIPrefix(log types.Log) (*SecondLiveMedalURIPrefix, error) {
	event := new(SecondLiveMedalURIPrefix)
	if err := _SecondLiveMedal.contract.UnpackLog(event, "URIPrefix", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecondLiveMedalUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the SecondLiveMedal contract.
type SecondLiveMedalUnpausedIterator struct {
	Event *SecondLiveMedalUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecondLiveMedalUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecondLiveMedalUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecondLiveMedalUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecondLiveMedalUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecondLiveMedalUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecondLiveMedalUnpaused represents a Unpaused event raised by the SecondLiveMedal contract.
type SecondLiveMedalUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_SecondLiveMedal *SecondLiveMedalFilterer) FilterUnpaused(opts *bind.FilterOpts) (*SecondLiveMedalUnpausedIterator, error) {

	logs, sub, err := _SecondLiveMedal.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &SecondLiveMedalUnpausedIterator{contract: _SecondLiveMedal.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_SecondLiveMedal *SecondLiveMedalFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *SecondLiveMedalUnpaused) (event.Subscription, error) {

	logs, sub, err := _SecondLiveMedal.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecondLiveMedalUnpaused)
				if err := _SecondLiveMedal.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_SecondLiveMedal *SecondLiveMedalFilterer) ParseUnpaused(log types.Log) (*SecondLiveMedalUnpaused, error) {
	event := new(SecondLiveMedalUnpaused)
	if err := _SecondLiveMedal.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecondLiveMedalUpdateTokenRoyaltyIterator is returned from FilterUpdateTokenRoyalty and is used to iterate over the raw logs and unpacked data for UpdateTokenRoyalty events raised by the SecondLiveMedal contract.
type SecondLiveMedalUpdateTokenRoyaltyIterator struct {
	Event *SecondLiveMedalUpdateTokenRoyalty // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecondLiveMedalUpdateTokenRoyaltyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecondLiveMedalUpdateTokenRoyalty)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecondLiveMedalUpdateTokenRoyalty)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecondLiveMedalUpdateTokenRoyaltyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecondLiveMedalUpdateTokenRoyaltyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecondLiveMedalUpdateTokenRoyalty represents a UpdateTokenRoyalty event raised by the SecondLiveMedal contract.
type SecondLiveMedalUpdateTokenRoyalty struct {
	TokenId      *big.Int
	Receiver     common.Address
	FeeNumerator *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterUpdateTokenRoyalty is a free log retrieval operation binding the contract event 0x8219bae90c1815288c07ea441a930eb14c911bcee209d79219ff8098e9b243a2.
//
// Solidity: event UpdateTokenRoyalty(uint256 indexed tokenId, address receiver, uint96 feeNumerator)
func (_SecondLiveMedal *SecondLiveMedalFilterer) FilterUpdateTokenRoyalty(opts *bind.FilterOpts, tokenId []*big.Int) (*SecondLiveMedalUpdateTokenRoyaltyIterator, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.FilterLogs(opts, "UpdateTokenRoyalty", tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &SecondLiveMedalUpdateTokenRoyaltyIterator{contract: _SecondLiveMedal.contract, event: "UpdateTokenRoyalty", logs: logs, sub: sub}, nil
}

// WatchUpdateTokenRoyalty is a free log subscription operation binding the contract event 0x8219bae90c1815288c07ea441a930eb14c911bcee209d79219ff8098e9b243a2.
//
// Solidity: event UpdateTokenRoyalty(uint256 indexed tokenId, address receiver, uint96 feeNumerator)
func (_SecondLiveMedal *SecondLiveMedalFilterer) WatchUpdateTokenRoyalty(opts *bind.WatchOpts, sink chan<- *SecondLiveMedalUpdateTokenRoyalty, tokenId []*big.Int) (event.Subscription, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _SecondLiveMedal.contract.WatchLogs(opts, "UpdateTokenRoyalty", tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecondLiveMedalUpdateTokenRoyalty)
				if err := _SecondLiveMedal.contract.UnpackLog(event, "UpdateTokenRoyalty", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateTokenRoyalty is a log parse operation binding the contract event 0x8219bae90c1815288c07ea441a930eb14c911bcee209d79219ff8098e9b243a2.
//
// Solidity: event UpdateTokenRoyalty(uint256 indexed tokenId, address receiver, uint96 feeNumerator)
func (_SecondLiveMedal *SecondLiveMedalFilterer) ParseUpdateTokenRoyalty(log types.Log) (*SecondLiveMedalUpdateTokenRoyalty, error) {
	event := new(SecondLiveMedalUpdateTokenRoyalty)
	if err := _SecondLiveMedal.contract.UnpackLog(event, "UpdateTokenRoyalty", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
